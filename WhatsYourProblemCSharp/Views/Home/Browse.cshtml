@{
    ViewBag.Title = "Browse";
}
@model WhatsYourProblemCSharp.Models.PUser
<style>
    /*Account stuff*/
    .accountStuff {
        float: right;
        width: 200px;
        clear:right;
    }

        .accountStuff > div {
            float: left;
            margin-right: 10px;
        }

    .logoff {
        cursor: pointer;
    }

        .logoff:hover {
            text-decoration: underline;
        }
    /*Problem stuff*/
.submitProblem {
float: left;
clear: left;
margin-bottom: 10px;
cursor: pointer;
color: #fff;
background-color: rgb(0, 112, 255);
padding-left: 1%;
padding-right: 1%;
padding-bottom: 0.15%;
margin-top: 0.5%;
}

        .submitProblem:hover {
background-color: rgb(0, 47, 167);
}
.problemContainer {
float: left;
clear: left;
width: 25%;
overflow-x: hidden;
overflow-y: auto;
max-height: 80%;
}
    .problemContent {
float: left;
clear: left;
margin-left: 0;
width: 98%;
height: 80%;
padding: 1%;
overflow-x: hidden;
border-top: solid 1px #000;
overflow-y: scroll;
}
    .problem:nth-child(even) {
    background-color: #ccc;
}
.problem:nth-child(odd) {
background-color: #DBDBDB;
}
    .problem {
float: left;
clear: left;
width: 100%;
margin-bottom: 0px;
padding: 1%;
}
    .problem.selectedProblem {
background-color: #2DAABB;
}


    .voteArrowsContainer {
        float: left;
        clear: left;
        margin-right: 0.5%;
    }

        .voteArrowsContainer > img {
            cursor: pointer;
        }

    .voteUpArrow {
        float: left;
        clear: left;
        height: 25px;
        width: 25px;
        background-color: #ccc;
    }

    .voteDownArrow {
        float: left;
        clear: left;
        height: 25px;
        width: 25px;
        background-color: #ccc;
    }

    .pTitle {
        float: left;
        width: 90%;
        cursor: pointer;
    }

    .pOptions {
        float: left;
        width: 90%;
        font-size: 0.8em;
    }

        .pOptions > div {
            float: left;
            margin-right: 1%;
        }
    /*Comment stuff*/
    .commentContainer {
        float: right;
        clear: right;
        width: 20%;
        overflow-x: hidden;
        overflow-y: scroll;
        height: 60%;
    }

    .comment.notUser {
        text-align: left;
        float: left;
        clear: both;
    }

        .comment.notUser > .colourBar {
            background-color: green;
            padding-left: 3%;
            color: white;
        }

    .comment.user {
        text-align: left;
        float: right;
        clear: both;
    }

        .comment.user > .colourBar {
            background-color: blue;
            padding-left: 3%;
            color: white;
        }

    .comment {
        margin-bottom: 7%;
        width: 90%;
    }
    .commentSubmitContainer {
float: right;
width: 20%;
position: relative;
}
    .commentSubmitContainer > textarea {
height: 100%;
width: 96%;
resize: none;
padding-left: 3%;
margin: 0;
overflow-y: auto;
border: solid 1px #3C3C3C;
overflow-x: hidden;
}

.commentSubmitContainer > input[type="button"] {
background-color: #d3dce0;
border: 1px solid #787878;
cursor: pointer;
font-weight: 600;
padding: 7px;
width: auto;
position: absolute;
bottom: -3%;
right: 0%;
padding-top: 0;
padding-bottom: 0;
font-size: 1em;
margin-right: 0%;
opacity: 0.3;
}

            .commentSubmitContainer > input[type="button"]:hover {
                opacity: 1;
            }

        .commentSubmitContainer > textarea {
            height: 100%;
            width: 96%;
            resize: none;
            padding-left: 3%;
            margin: 0;
            overflow-y: auto;
            overflow-x: hidden;
        }

    .commentContainer  .content {
        background-color: #ccc;
        padding-left: 3%;
        font-size: 0.9em;
    }

    .messageDetails {
        font-size: 0.7em;
        color: #696969;
    }

    .pContentHolder {
        float: left;
        position: relative;
        width: 90%;
        border: solid 1px #ccc;
        margin-top: 1%;
    }

    .pContent {
        float: left;
        width: 98%;
        padding: 1%;
        min-height: 20px;
    }

    .pContentControls {
        position: absolute;
        top: 5px;
        right: 11px;
        font-size: 0.8em;
        cursor: pointer;
    }

        .pContentControls:hover {
            text-decoration: underline;
        }


    .showContent:hover {
        text-decoration: underline;
    }

.problemContentContainer {
position: relative;
float: left;
width: 50%;
background-color: aliceblue;
padding-left: 1%;
height: 80%;
display: block;
}

    .editProblem {
        float:right;
        cursor: pointer;
        background-color: #ccc;
        padding-left: 3px;
        padding-right: 3px;
        border-top: solid 1px #000;
        border-left: solid 1px #000;
        border-right: solid 1px #000;
    }

        .editProblem[disabled="disabled"] {
            cursor: default;
        }

            .editProblem[disabled="disabled"]:hover {
                text-decoration: none;
            }

        .editProblem:hover {
            text-decoration: underline;
        }


    .deleteProblem {
        text-decoration: underline;
        cursor: pointer;
    }
.subproblemContainer {
float: left;
clear: left;
width: 100%;
max-height: 100px;
min-height: 10px;
}
    .subproblem {
cursor: pointer;
background-color: rgb(215, 252, 255);
padding-left: 1%;
float: left;
padding-right: 1%;
}
        .subproblem:hover {
background-color: rgb(132, 246, 255);
}
.parentproblemContainer {
float: left;
clear: left;
max-height: 100px;
text-overflow: ellipsis;
width: 100%;
margin-bottom: 11px;
}
    .parentproblem {
cursor: pointer;
background-color: rgb(215, 252, 255);
padding-left: 1%;
float: left;
padding-right: 1%;
}
.parentproblem:hover {
background-color: rgb(132, 246, 255);
}
.addParentProblem {
background-color: rgb(197, 255, 197);
float: left;
padding-left: 1%;
padding-right: 1%;
cursor: pointer;
}
.addParentProblem:hover {
background-color: rgb(7, 192, 7);
}
.addSubProblem{
background-color: rgb(197, 255, 197);
float: left;
padding-left: 1%;
padding-right: 1%;
cursor:pointer;
}
.addSubProblem:hover {
background-color: rgb(7, 192, 7);
}
.parentproblem div {
float: left;
}
.subproblem > div {
float: left;
}
.close {
margin-left: 5px;
padding: 1px;
padding-left: 3px;
padding-right: 3px;
}
.close:hover {
color: red;
font-weight: bold;
background-color: #000;
}
    .visible {
        display: block;
    }
</style>
<script src="~/Scripts/bootstrap-wysiwyg.js"></script>
<script>
    //FORMATTING ETC
    $('body').css('height', $(window).height() + 'px');
    //PROBLEM MANAGEMENT
    $(document).on('click', '.subproblem', function () {
        //find the problem listed in the side
        $('.problem[problemid="'+$(this).attr('problemid')+'"]').trigger('click');
    });
    $(document).on('click', '.parentproblem', function () {
        //find the problem listed in the side
        $('.problem[problemid="' + $(this).attr('problemid') + '"]').trigger('click');
    });
    $(document).on('click', '.problem', function (e) {

        var $problem = $(this);
        var problemid = $problem.attr('problemid');
        var wasSelected = $problem.hasClass('selectedProblem');

        var $oldSelectedProblem = $('.selectedProblem');
        var wasEditingOldSelectedProblem = $oldSelectedProblem.attr('editingid') == currentUserID;
        var oldProblemID = $oldSelectedProblem.attr('problemid');
        var oldContent = $('.problemContent').html();
        var oldProblemTitle = $oldSelectedProblem.find('.pTitle').text();
        $('.problem').removeClass('selectedProblem');
        $('.btn-toolbar').css('display', 'none');

        if (!wasSelected) {
            $problem.addClass('selectedProblem');
            if (wasEditingOldSelectedProblem) {
                QuickBackgroundSave(oldProblemID, oldContent, oldProblemTitle);
            }
            LoadContent(problemid);
            LoadChat(problemid);
            chat.server.joinGroup(problemid);
        } else {
            chat.server.leaveGroup(problemid);
            ClearContent();
            ClearChat();

        }
    });
    $(document).on('click', '.editProblem', function (e) {
        $this = $(this);
        $('.btn-toolbar').css('display', 'none');
        if ($this.attr('disabled') == null) {

            $problemContent = $('.problemContent');
            if ($problemContent.attr('contenteditable') == 'false') {
                problem.server.startEditing(currentUserID, $('.selectedProblem').attr('problemid'))
                $problemContent.attr('contenteditable', 'true');
                $this.text('click to save');
                $problemContent.focus();
                $('.btn-toolbar').css('display', 'block');
            } else {
                SaveContent($('.selectedProblem').attr('problemid'), $('.problemContent').html());
            }
        }
    });
    $(document).on('click', '.submitProblem', function (e) {
        $('.submitProblem-container').fadeIn(100);
        $('.submitProblem-cover').fadeIn(100);
        $('.newProblemText').focus();
        $('#submitProblem-form input[name="relationship"]').val("");
        $('#submitProblem-form input[name="relatedid"]').val("");
        $('.newProblemText').autocomplete('destroy').removeAttr('problemid').val('');
    });
    $(document).on('click', '.addParentProblem', function (e) {
        $('.submitProblem-container').fadeIn(100);
        $('.submitProblem-cover').fadeIn(100);
        $('.newProblemText').focus();
        $('#submitProblem-form input[name="relationship"]').val('parent');
        $('#submitProblem-form input[name="relatedid"]').val($('.selectedProblem').attr('problemid'));
        $('.newProblemText').autocomplete('destroy').removeAttr('problemid').val('');
        $('.newProblemText').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/Problem/AutocompleteBox',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ term: request.term }),
                    success: function (data) {
                        response(
                            $.map(data, function (item) {
                                return {
                                    label: item.label,
                                    value: item.label,
                                    id: item.id,
                                };
                            }))
                    }
                })
            },
            minLength: 2,
            select: function (event, ui) {
                $('.newProblemText').attr('problemid', ui.item.id);
            },
            change: function (event, ui) {
                if (ui.item == null) {
                    $('.newProblemText').removeAttr('problemid')
                }
            },
        });
    });
    $(document).on('click', '.addSubProblem', function (e) {
        $('.submitProblem-container').fadeIn(100);
        $('.submitProblem-cover').fadeIn(100);
        $('.newProblemText').focus();
        $('#submitProblem-form input[name="relationship"]').val("subproblem");
        $('#submitProblem-form input[name="relatedid"]').val($('.selectedProblem').attr('problemid'));
        $('.newProblemText').autocomplete('destroy').removeAttr('problemid').val('');
        $('.newProblemText').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/Problem/AutocompleteBox',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ term: request.term }),
                    success: function (data) {
                        response(
                            $.map(data, function (item) {
                                return {
                                    label: item.label,
                                    value: item.label,
                                    id: item.id,
                                };
                            }))
                    }
                })
            },
            minLength: 2,
            select: function (event, ui) {
                $('.newProblemText').attr('problemid', ui.item.id);
            },
            change: function (event, ui) {
                if (ui.item == null) {
                    $('.newProblemText').removeAttr('problemid')
                }
            },
        });
    });
    $(document).on('click', '.close', function (e) {
        e.stopPropagation();
        var $this = $(this);
        var $parentProblem = $this.closest('.parentproblem');
        var $subProblem = $this.closest('.subproblem');
        var isSubProblem = $($subProblem[0]).length > 0;
        var isParentProblem = $($parentProblem[0]).length > 0;
        if (isSubProblem) {
            CancelRelationship($('.selectedProblem').attr('problemid'),$subProblem.attr('problemid'));
        } else {
            if (isParentProblem) {
                CancelRelationship($parentProblem.attr('problemid'), $('.selectedProblem').attr('problemid'));
            }
        }
    });
    $(document).on('mouseenter', '.problem', function (e) {
        $(this).find('.deleteProblem').css('display', 'block');
    });
    $(document).on('mouseleave', '.problem', function (e) {
        $(this).find('.deleteProblem').css('display', 'none');
    });
    $(document).on('click', '.deleteProblem', function (e) {
        var $problem = $(this).closest('.problem');
        if (confirm('Are you sure you want to delete "' + $problem.find('.pTitle').text() + '"?')) {
            e.stopPropagation();
            DeleteProblem($problem.attr('problemid'), $problem);
        }
    });
    $(document).keydown(function (event) {

        //19 for Mac Command+S
        if (!(String.fromCharCode(event.which).toLowerCase() == 's' && event.ctrlKey) && !(event.which == 19)) return true;
        $problemContent = $('.problemContent');
        if ($problemContent.attr('contenteditable') == 'true') {
            SaveContent($('.selectedProblem').attr('problemid'), $('.problemContent').html());
        }

        event.preventDefault();
        return false;
    });
    function LoadContent(problemID) {
        $('.editProblem').css('display', 'none');
        $('.relationshipProblemContainer').css('display', 'none');
        $('.problemContent').text('loading...');
        $('.subproblemContainer .subproblem').remove();
        $('.parentproblemContainer .parentproblem').remove();
        var data = {
            problemID: problemID,
        };
        var dataToPost = JSON.stringify(data);
        $.ajax({
            type: "POST",
            url: "/Problem/GetContent",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: dataToPost,
            success: function (a) {
                if (a != 'failure') {
                    $('.problemContent').html(a.Content);
                    $subproblemContainer = $('.subproblemContainer');
                    $parentproblemContainer = $('.parentproblemContainer');
                    $(a.SubProblems).each(function (i, subproblem) {
                        $('<div class="subproblem" problemid="'+subproblem.ID+'"><div class="title">'+subproblem.Title+'</div><div class="close">x</div></div>').appendTo($subproblemContainer);
                    });
                    $(a.ParentProblems).each(function (i, parentproblem) {
                        $('<div class="parentproblem" problemid="' + parentproblem.ID + '"><div class="title">' + parentproblem.Title + '</div><div class="close">x</div></div>').appendTo($parentproblemContainer);
                    });
                    //who's editing etc
                    var editingID = $('.problem[problemid="' + problemID + '"]').attr('editingid');
                    if ((editingID != currentUserID) && editingID != null) {
                        $('.editProblem').css('display', 'block').text('someone is editing this').attr('disabled', 'disabled');
                        $('.relationshipProblemContainer').css('display', 'block');
                    } else {
                        $('.editProblem').css('display', 'block').text('edit').removeAttr('disabled');
                        $('.relationshipProblemContainer').css('display', 'block');
                    }
                } else {
                    $('.problemContent').html('<div style="color:red;">Server error - getting problem content. This problem may no longer exist?</div>');
                }
            },
            error: function (ex) {
                //communication error
                $('.problemContent').html('<div style="color:red;">Communication error getting problem content. Please check your connection and try again.</div>');
            },

        });
    }
    function QuickBackgroundSave(problemID, content, problemTitle) {
        //no modification to elements etc, just save, move on.
        var data = {
            problemID: problemID,
            content: content,
        };
        var dataToPost = JSON.stringify(data);
        $.ajax({
            type: "POST",
            url: "/Problem/SaveContent",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: dataToPost,
            success: function (a) {
                if (a) {
                    //great
                } else {
                    alert('server error saving: ' + problemTitle);
                }
            },
            error: function (ex) {
                //communication error
                alert('communication error saving:' + problemTitle + '- please check your connection');
            },

        });
    };
    function SaveContent(problemID, content) {
        $('.editProblem').attr('disabled', 'disabled').text('saving...');
        $('.problemContent').attr('contenteditable', 'false');
        var data = {
            problemID: problemID,
            content: content,
        };
        var dataToPost = JSON.stringify(data);
        $.ajax({
            type: "POST",
            url: "/Problem/SaveContent",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: dataToPost,
            success: function (a) {
                if (a) {
                    problem.server.stopEditing(currentUserID, $('.selectedProblem').attr('problemid'));
                    $('.editProblem').text('edit').removeAttr('disabled');
                } else {
                    alert('server error saving');
                }
            },
            error: function (ex) {
                //communication error
                alert('communication error saving - please check your connection');
            },

        });
    }
    function DeleteProblem(problemID, $problem) {
        var data = {
            problemID: problemID,
        };
        var dataToPost = JSON.stringify(data);
        $.ajax({
            type: "POST",
            url: "/Problem/DeleteProblem",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: dataToPost,
            success: function (a) {
                if (a) {
                    problem.server.aProblemHasBeenDeleted(problemID);
                } else {
                    alert('server error deleting');
                }
            },
            error: function (ex) {
                //communication error
                alert('communication error deleting - please check your connection');
            },

        });
    }
    function CancelRelationship(parentid,childid) {
        var data = {
            parentid: parentid,
            childid : childid,
        };
        var dataToPost = JSON.stringify(data);
        $.ajax({
            type: "POST",
            url: "/Problem/CancelRelationship",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: dataToPost,
            success: function (res) {
                if (res != null) {
                    problem.server.aRelationshipHasBeenRemoved(res.parentid, res.childid);
                } else {
                    alert('server error');
                }
            },
            error: function (ex) {
                //communication error
                // $('.problemContent').html('<div style="color:red;">Communication error getting problem content. Please check your connection and try again.</div>');
            },

        });
    }
    function ClearContent() {
        $('.problemContent').html("");
        $('.subproblemContainer .subproblem').remove();
        $('.parentproblemContainer .parentproblem').remove();
        $('.editProblem').css('display', 'none');
        $('.relationshipProblemContainer').css('display', 'none');
    }
    $(document).ready(function () {
       $('.problemContent').wysiwyg();
    });
    //AUTHENTICATION
    $(document).on('click', '.logoff', function (e) {
        $('.logoff').attr('disabled', 'disabled').text('logging off...');
        $.ajax({
            type: "POST",
            url: "/Account/JsonLogOff",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (a) {
                if (a) {
                    $('.logoff').text('logged off');
                    document.location = "/Home";
                } else {
                    alert('server error');
                }
            },
            error: function (ex) {
                //communication error
                alert('communication error');
            },

        });
    });
    //CHAT
    function LoadChat(problemID) {
        $('.commentContainer').html('<div>loading comments...</div>');
        var data = {
            problemID: problemID,
        };
        var dataToPost = JSON.stringify(data);
        $.ajax({
            type: "POST",
            url: "/Chat/GetChat",
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            data: dataToPost,
            success: function (data) {
                $('.commentContainer').html(data);
                $('.commentContainer').scrollTop(999999);
            },
            error: function (ex) {
                //communication error
                // $('.problemContent').html('<div style="color:red;">Communication error getting problem content. Please check your connection and try again.</div>');
            },

        });
    }
    function CreateChat(problemID, content) {
        $('#chatContent').attr('disabled', 'disabled');
        $('#submitChat').attr('disabled', 'disabled');
        var data = {
            problemID: problemID,
            content: content,
        };
        var dataToPost = JSON.stringify(data);
        $.ajax({
            type: "POST",
            url: "/Chat/Create",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: dataToPost,
            success: function (id) {
                chat.server.send(id);
                $('#chatContent').removeAttr('disabled').val("");
                $('#submitChat').removeAttr('disabled').val("enter");
            },
            error: function (ex) {
                //communication error
                alert('communication error');
            },

        });
    }
    function ClearChat() {
        $('.commentContainer').html('');
    }
    $(document).ready(function () {
        $('#chatContent').bind('keydown', function (e) {

            if (e.which === 13) { // 13 is enter key

                submitChat();

            }

        });
    });
    $(document).on('click', '#submitChat', function (e) {
        submitChat();
    });
    function submitChat() {
        var content = $('#chatContent').val();
        if (content != "") {
            CreateChat($('.selectedProblem').attr('problemid'), content);
        }
    }
    //EDIT TOOLBAR
    $(document).on('click', '.btn-group', function (e) {
        var $dropdownmenu = $(this).find('.dropdown-menu');
        $dropdownmenu.toggleClass('visible');
    });
</script>
<script src="/Scripts/jquery.signalR-1.1.3.min.js"></script>
<script src="/signalr/hubs"></script>
<input type="hidden" id="userid" value="@Model.ID" />
<script type="text/javascript">
    var currentUserID = $('#userid').val();
    var chat;
    $(function () {
        chat = $.connection.chatHub;
        chat.client.addMessage = function (posterid, name, message, datetime) {
            var chatMessage = '';
            chatMessage += '<div class="comment ' + (posterid == currentUserID ? 'user' : 'notUser') + '">';
            chatMessage += '<div class="colourBar"><span>' + name + '</span></div>';
            chatMessage += '<div class="content">' + message + '</div>';
            chatMessage += '<div class="messageDetails"><span class="messageDate">' + datetime + '</span></div>';
            chatMessage += '</div>';
            $(chatMessage).appendTo('.commentContainer')
            $('.commentContainer').scrollTop(999999);
            $('.commentSubmitContainer > textarea').val("");
            $('.commentSubmitContainer > input[type="button"]').removeAttr('enabled').val('send');

        }
        $.connection.hub.start();
    })
    var problem;
    $(function () {
        problem = $.connection.problemHub;
        problem.client.addProblem = function (id, title, shortDate, firstName, submitterUserID) {
            if ($($('.problem[problemid="' + id + '"]')[0]).length == 0) {
                var probString = "";
                probString += '<div class="problem new" style="display:none;" problemid="' + id + '">';
                probString += '<div class="voteArrowsContainer">';
                probString += '<!--<img class="voteUpArrow" />';
                probString += '<img class="voteDownArrow" />';
                probString += '</div>-->';
                probString += '<div class="pTitle">' + title + '</div>';
                probString += '<div class="pOptions">';
                probString += '<div>' + shortDate + '</div>';
                probString += '<div>' + firstName + '</div>';
                if (submitterUserID == currentUserID) {
                    probString += '<div class="deleteProblem" style="display:none;">[delete]</div>';
                }
                probString += '</div>';
                probString += '</div>';
                $(probString).prependTo('.problemContainer');
                $('.new').fadeIn(500, function () {
                    $('.new').removeClass('new');
                });
            };
        }
        problem.client.someoneHasStartedEditing = function (userid, problemid) {
            //set attribute on the problem
            $('.problem[problemid="' + problemid + '"]').attr('editingid', userid);
            //stop user from editing document if they are currently unless they're the user who made all this nonsense happen.
            if (($('.selectedProblem').attr('problemid') == problemid) && (userid != currentUserID)) {
                $('.problemContent').removeAttr('contenteditable');
                $('.editProblem').attr('disabled', 'disabled').text('someone is editing this');
            };

        }
        problem.client.someoneHasStoppedEditing = function (userid, problemid) {
            //set attribute on the problem
            $('.problem[problemid="' + problemid + '"]').removeAttr('editingid');
            //if user has this open already and  they're not the user that made this happen then let them have the option of editing if they want
            if (($('.selectedProblem').attr('problemid') == problemid) && (userid != currentUserID)) {
                LoadContent(problemid);//update data to reflect most recent
                $('.editProblem').removeAttr('disabled').text('edit');
            };

        }
        problem.client.removeProblemFromView = function (problemid) {
            if ($('.selectedProblem').attr('problemid') == problemid) {
                //user is editing the problem which the original editer wants to delete
                $('.problemContent').html('');
                ClearChat();
            }
            $('.problem[problemid="' + problemid + '"]').fadeOut(500);

        }
        problem.client.removeRelationship = function (parentid, childid) {
            var $selectedProblem = $('.selectedProblem');
            if ($($selectedProblem[0]).length > 0) {
                //a problem is selected
                var $subproblem = $('.subproblem[problemid="'+childid+'"]');
                var $parentproblem = $('.parentproblem[problemid="' + parentid + '"]');
                if ($selectedProblem.attr('problemid') == parentid && $($subproblem[0]).length > 0) {
                    //case 1: selected problem is parent which has subproblem as the child
                    $subproblem.css('background-color', 'red').delay(1000).fadeOut(200, function () { $(this).remove(); });
                };
                if ($selectedProblem.attr('problemid') == childid && $($parentproblem[0]).length > 0) {
                    //case 2: selected problem is the child which has parentproblem as the parent
                    $parentproblem.css('background-color', 'red').delay(1000).fadeOut(200, function (){$(this).remove();});
                };
            } else {
                //no problem is selected, don't need to do anything.
            }
        }
        problem.client.addRelationship = function (origid, newid,relationship,title) {
            var $selectedProblem = $('.selectedProblem[problemid="'+origid+'"]');
            if ($($selectedProblem[0]).length > 0) {
                switch (relationship) {
                    case 'subproblem':
                        var $subproblemContainer = $('.subproblemContainer');
                        $('<div class="subproblem" problemid="' + newid + '"><div class="title">' + title + '</div><div class="close">x</div></div>').appendTo($subproblemContainer);
                        break;
                    case 'parent':
                        var $parentproblemContainer = $('.parentproblemContainer');
                        $('<div class="parentproblem" problemid="' + newid + '"><div class="title">' + title + '</div><div class="close">x</div></div>').appendTo($parentproblemContainer);
                        break;

                }
            } else {
                //no problem is selected, don't need to do anything.
            }
        }
        /*
        problem.client.checkWhosOnline = function () {
            $.ajax({
                type: "POST",
                url: "/Problem/WhosOnline",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (a) {
                    if (a != null) {
                        var strOnlineUsers = "";
                        $(a).each(function (i, firstName) {
                            strOnlineUsers += firstName + " ";
                        });
                        $('.onlineUsers >.content').text(strOnlineUsers);
                    } else {
                        //server error
                    }
                },
                error: function (ex) {
                    //communication error
                    
                },

            });
        }
        */
        $.connection.hub.start();
    })
</script>
<script>
    //hotkeys
    /*
 * jQuery Hotkeys Plugin
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Based upon the plugin by Tzury Bar Yochay:
 * http://github.com/tzuryby/hotkeys
 *
 * Original idea by:
 * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/
*/

    (function (jQuery) {

        jQuery.hotkeys = {
            version: "0.8",

            specialKeys: {
                8: "backspace", 9: "tab", 13: "return", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause",
                20: "capslock", 27: "esc", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home",
                37: "left", 38: "up", 39: "right", 40: "down", 45: "insert", 46: "del",
                96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7",
                104: "8", 105: "9", 106: "*", 107: "+", 109: "-", 110: ".", 111: "/",
                112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8",
                120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "numlock", 145: "scroll", 191: "/", 224: "meta"
            },

            shiftNums: {
                "`": "~", "1": "!", "2": "@{Html.Raw("@");}", "3": "#", "4": "$", "5": "%", "6": "^", "7": "&",
		    "8": "*", "9": "(", "0": ")", "-": "_", "=": "+", ";": ": ", "'": "\"", ",": "<",
		    ".": ">", "/": "?", "\\": "|"
		}
	};

    function keyHandler(handleObj) {
        // Only care when a possible input has been specified
        if (typeof handleObj.data !== "string") {
            return;
        }

        var origHandler = handleObj.handler,
			keys = handleObj.data.toLowerCase().split(" "),
			textAcceptingInputTypes = ["text", "password", "number", "email", "url", "range", "date", "month", "week", "time", "datetime", "datetime-local", "search", "color"];

        handleObj.handler = function (event) {
            // Don't fire in text-accepting inputs that we didn't directly bind to
            if (this !== event.target && (/textarea|select/i.test(event.target.nodeName) ||
				jQuery.inArray(event.target.type, textAcceptingInputTypes) > -1)) {
                return;
            }

            // Keypress represents characters, not special keys
            var special = event.type !== "keypress" && jQuery.hotkeys.specialKeys[event.which],
				character = String.fromCharCode(event.which).toLowerCase(),
				key, modif = "", possible = {};

            // check combinations (alt|ctrl|shift+anything)
            if (event.altKey && special !== "alt") {
                modif += "alt+";
            }

            if (event.ctrlKey && special !== "ctrl") {
                modif += "ctrl+";
            }

            // TODO: Need to make sure this works consistently across platforms
            if (event.metaKey && !event.ctrlKey && special !== "meta") {
                modif += "meta+";
            }

            if (event.shiftKey && special !== "shift") {
                modif += "shift+";
            }

            if (special) {
                possible[modif + special] = true;

            } else {
                possible[modif + character] = true;
                possible[modif + jQuery.hotkeys.shiftNums[character]] = true;

                // "$" can be triggered as "Shift+4" or "Shift+$" or just "$"
                if (modif === "shift+") {
                    possible[jQuery.hotkeys.shiftNums[character]] = true;
                }
            }

            for (var i = 0, l = keys.length; i < l; i++) {
                if (possible[keys[i]]) {
                    return origHandler.apply(this, arguments);
                }
            }
        };
    }

    jQuery.each(["keydown", "keyup", "keypress"], function () {
        jQuery.event.special[this] = { add: keyHandler };
    });

})(jQuery);
</script>

<div class="accountStuff">
    <div class="hiUser">Hi @Model.NameFirst</div>
    <div class="logoff">log off</div>

</div>
<div class="submitProblem">
    New Idea
</div>

<div class="problemContainer">
    @Html.Action("ProblemContainer", "Problem")
</div>

<div class="problemContentContainer">
    <div class="parentproblemContainer relationshipProblemContainer" style="display:none;">
        <div class="xlabel">Parent-problems: </div>
        <div class="addParentProblem">+ Add</div>
    </div>
    <div class="editProblem" style="display: none;">edit</div>
    
    <div class="btn-toolbar" data-role="editor-toolbar"
        data-target=".problemContent" style="display:none;">
      <div class="btn-group">
        <a class="btn dropdown-toggle" data-toggle="dropdown" title="" data-original-title="Font"><i class="icon-font"></i><b class="caret"></b></a>
          <ul class="dropdown-menu">
          <li><a data-edit="fontName Serif" style="font-family:'Serif'">Serif</a></li><li><a data-edit="fontName Sans" style="font-family:'Sans'">Sans</a></li><li><a data-edit="fontName Arial" style="font-family:'Arial'">Arial</a></li><li><a data-edit="fontName Arial Black" style="font-family:'Arial Black'">Arial Black</a></li><li><a data-edit="fontName Courier" style="font-family:'Courier'">Courier</a></li><li><a data-edit="fontName Courier New" style="font-family:'Courier New'">Courier New</a></li><li><a data-edit="fontName Comic Sans MS" style="font-family:'Comic Sans MS'">Comic Sans MS</a></li><li><a data-edit="fontName Helvetica" style="font-family:'Helvetica'">Helvetica</a></li><li><a data-edit="fontName Impact" style="font-family:'Impact'">Impact</a></li><li><a data-edit="fontName Lucida Grande" style="font-family:'Lucida Grande'">Lucida Grande</a></li><li><a data-edit="fontName Lucida Sans" style="font-family:'Lucida Sans'">Lucida Sans</a></li><li><a data-edit="fontName Tahoma" style="font-family:'Tahoma'">Tahoma</a></li><li><a data-edit="fontName Times" style="font-family:'Times'">Times</a></li><li><a data-edit="fontName Times New Roman" style="font-family:'Times New Roman'">Times New Roman</a></li><li><a data-edit="fontName Verdana" style="font-family:'Verdana'">Verdana</a></li></ul>
        </div>
      <div class="btn-group">
        <a class="btn dropdown-toggle" data-toggle="dropdown" title="" data-original-title="Font Size"><i class="icon-text-height"></i>&nbsp;<b class="caret"></b></a>
          <ul class="dropdown-menu">
          <li><a data-edit="fontSize 5"><font size="5">Huge</font></a></li>
          <li><a data-edit="fontSize 3"><font size="3">Normal</font></a></li>
          <li><a data-edit="fontSize 1"><font size="1">Small</font></a></li>
          </ul>
      </div>
      <div class="btn-group">
        <a class="btn" data-edit="bold" title="" data-original-title="Bold (Ctrl/Cmd+B)"><i class="icon-bold"></i></a>
        <a class="btn" data-edit="italic" title="" data-original-title="Italic (Ctrl/Cmd+I)"><i class="icon-italic"></i></a>
        <a class="btn" data-edit="strikethrough" title="" data-original-title="Strikethrough"><i class="icon-strikethrough"></i></a>
        <a class="btn" data-edit="underline" title="" data-original-title="Underline (Ctrl/Cmd+U)"><i class="icon-underline"></i></a>
      </div>
      <div class="btn-group">
        <a class="btn" data-edit="insertunorderedlist" title="" data-original-title="Bullet list"><i class="icon-list-ul"></i></a>
        <a class="btn" data-edit="insertorderedlist" title="" data-original-title="Number list"><i class="icon-list-ol"></i></a>
        <a class="btn" data-edit="outdent" title="" data-original-title="Reduce indent (Shift+Tab)"><i class="icon-indent-left"></i></a>
        <a class="btn" data-edit="indent" title="" data-original-title="Indent (Tab)"><i class="icon-indent-right"></i></a>
      </div>
      <div class="btn-group">
        <a class="btn" data-edit="justifyleft" title="" data-original-title="Align Left (Ctrl/Cmd+L)"><i class="icon-align-left"></i></a>
        <a class="btn" data-edit="justifycenter" title="" data-original-title="Center (Ctrl/Cmd+E)"><i class="icon-align-center"></i></a>
        <a class="btn" data-edit="justifyright" title="" data-original-title="Align Right (Ctrl/Cmd+R)"><i class="icon-align-right"></i></a>
        <a class="btn" data-edit="justifyfull" title="" data-original-title="Justify (Ctrl/Cmd+J)"><i class="icon-align-justify"></i></a>
      </div>
      <div class="btn-group">
		  <a class="btn dropdown-toggle" data-toggle="dropdown" title="" data-original-title="Hyperlink"><i class="icon-link"></i></a>
		    <div class="dropdown-menu input-append">
			    <input class="span2" placeholder="URL" type="text" data-edit="createLink">
			    <button class="btn" type="button">Add</button>
        </div>
        <a class="btn" data-edit="unlink" title="" data-original-title="Remove Hyperlink"><i class="icon-cut"></i></a>

      </div>
      <!--
      <div class="btn-group">
        <a class="btn" title="" id="pictureBtn" data-original-title="Insert picture (or just drag &amp; drop)"><i class="icon-picture"></i></a>
        <input type="file" data-role="magic-overlay" data-target="#pictureBtn" data-edit="insertImage" style="opacity: 0; position: absolute; top: 0px; left: 0px; width: 37px; height: 30px;">
      </div>-->
      <div class="btn-group">
        <a class="btn" data-edit="undo" title="" data-original-title="Undo (Ctrl/Cmd+Z)"><i class="icon-undo"></i></a>
        <a class="btn" data-edit="redo" title="" data-original-title="Redo (Ctrl/Cmd+Y)"><i class="icon-repeat"></i></a>
      </div>
      <input type="text" data-edit="inserttext" id="voiceBtn" x-webkit-speech="" style="position: absolute; top: 280px; left: 1162.5px;">
    </div>
         
    <div id="editor" class="problemContent" tabindex="1">
    </div>
         
    <div class="subproblemContainer relationshipProblemContainer"  style="display:none;">
        <div class="xlabel">Sub-problems: </div>
        <div class="addSubProblem">+ Add</div>
    </div>
</div>
      
<div class="commentContainer">
</div>
<form id="commentSubmitContainer" class="commentSubmitContainer">
    <textarea id="chatContent"></textarea>
    <input id="submitChat" type="button" value="enter" />
</form>
@Html.Action("Submit", "Problem")